{"version":3,"file":"js/750.1ead9979.js","mappings":"sKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,cAAc,CAACF,EAAG,UAAU,CAACG,YAAYL,EAAIM,GAAG,CAAC,CAACC,IAAI,SAASC,GAAG,WAAW,MAAO,CAACR,EAAIS,GAAG,cAAc,EAAEC,OAAM,MAAS,CAACR,EAAG,UAAU,CAACS,IAAI,SAASC,MAAM,CAAC,aAAe,MAAM,MAAQZ,EAAIa,KAAK,MAAQb,EAAIc,QAAQ,CAACZ,EAAG,eAAe,CAACU,MAAM,CAAC,MAAQ,MAAM,KAAO,aAAa,CAACV,EAAG,WAAW,CAACU,MAAM,CAAC,YAAc,SAASG,MAAM,CAACC,MAAOhB,EAAIa,KAAKI,SAAUC,SAAS,SAAUC,GAAMnB,EAAIoB,KAAKpB,EAAIa,KAAM,WAAYM,EAAI,EAAEE,WAAW,oBAAoB,GAAGnB,EAAG,eAAe,CAACU,MAAM,CAAC,MAAQ,KAAK,KAAO,aAAa,CAACV,EAAG,WAAW,CAACU,MAAM,CAAC,KAAO,WAAW,YAAc,UAAUG,MAAM,CAACC,MAAOhB,EAAIa,KAAKS,SAAUJ,SAAS,SAAUC,GAAMnB,EAAIoB,KAAKpB,EAAIa,KAAM,WAAYM,EAAI,EAAEE,WAAW,oBAAoB,GAAGnB,EAAG,eAAe,CAACE,YAAY,MAAM,CAACF,EAAG,YAAY,CAACU,MAAM,CAAC,KAAO,WAAWW,GAAG,CAAC,MAAQvB,EAAIwB,aAAa,CAACxB,EAAIS,GAAG,SAASP,EAAG,YAAY,CAACqB,GAAG,CAAC,MAAQvB,EAAIyB,QAAQ,CAACzB,EAAIS,GAAG,UAAU,IAAI,IAAI,IAAI,EAC79B,EACIiB,EAAkB,G,oBCoCtB,GACAC,KAAA,aACAC,OACA,OACAf,KAAA,CACAI,SAAA,GACAK,SAAA,IAEAR,MAAA,CAOAG,SAAA,CACA,CAAAY,UAAA,EAAAC,QAAA,SAAAC,QAAA,mBACA,CAAAC,IAAA,EAAAC,IAAA,GAAAH,QAAA,iBAAAC,QAAA,oBAEAT,SAAA,CACA,CAAAO,UAAA,EAAAC,QAAA,QAAAC,QAAA,mBAEA,CAAAG,QAAA,aAAAJ,QAAA,iBAAAC,QAAA,qBAIA,EACAI,QAAA,CACA,mBAEA,UACA,KAAAC,MAAAC,OAAAC,WAEA,MAAAC,QAAAC,EAAAA,EAAAA,GAAA,KAAA3B,MAMA,KAAA4B,OAAAC,OAAA,oBAAAH,EAAAX,KAAAe,OAGA,KAAAC,QAAAC,KAAA,IACA,OAAAC,GACAC,QAAAC,IAAAF,EACA,CACA,EACArB,QAEA,KAAAW,MAAAC,OAAAY,aACA,ICxF8P,I,UCQ1PC,GAAY,OACd,EACAnD,EACA2B,GACA,EACA,KACA,WACA,MAIF,EAAewB,EAAiB,O,4FCfzB,MAAMV,EAAQA,EAAGvB,WAAUK,cACzB6B,EAAAA,EAAAA,KAAa,cAAe,CACjClC,WACAK,aAKS8B,EAAUA,IACdD,EAAAA,EAAAA,IAAY,oB","sources":["webpack://hm-element-pc/./src/views/login/index.vue","webpack://hm-element-pc/src/views/login/index.vue","webpack://hm-element-pc/./src/views/login/index.vue?75e3","webpack://hm-element-pc/./src/views/login/index.vue?a173","webpack://hm-element-pc/./src/api/user.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"login-page\"},[_c('el-card',{scopedSlots:_vm._u([{key:\"header\",fn:function(){return [_vm._v(\"面经运营后台管理系统\")]},proxy:true}])},[_c('el-form',{ref:\"myForm\",attrs:{\"autocomplete\":\"off\",\"model\":_vm.form,\"rules\":_vm.rules}},[_c('el-form-item',{attrs:{\"label\":\"用户名\",\"prop\":\"username\"}},[_c('el-input',{attrs:{\"placeholder\":\"输入用户名\"},model:{value:(_vm.form.username),callback:function ($$v) {_vm.$set(_vm.form, \"username\", $$v)},expression:\"form.username\"}})],1),_c('el-form-item',{attrs:{\"label\":\"密码\",\"prop\":\"password\"}},[_c('el-input',{attrs:{\"type\":\"password\",\"placeholder\":\"输入用户密码\"},model:{value:(_vm.form.password),callback:function ($$v) {_vm.$set(_vm.form, \"password\", $$v)},expression:\"form.password\"}})],1),_c('el-form-item',{staticClass:\"tc\"},[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.clickLogin}},[_vm._v(\"登 录\")]),_c('el-button',{on:{\"click\":_vm.reset}},[_vm._v(\"重 置\")])],1)],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"login-page\">\r\n    <el-card >\r\n      <!-- 插槽 人家组件内部，必然写了 <slot name=\"header\"></slot> -->\r\n\r\n      <template #header>面经运营后台管理系统</template>\r\n      <!--\r\n       实现表单校验：4个关键属性\r\n       el-form 整个form组件\r\n          :model :需要绑定一个对象，对象有着很多属性，每个属性都会和表单元素双向绑定,且能明确要校验的是哪个对象\r\n          :rules :配置校验的规则\r\n       el-form-item 表单域，一行，可以存放格式类型的表单元素\r\n          prop   :配置字段名,决定了校验效果的配置，必须对应\r\n       el-input 文本域\r\n          v-model\r\n       -->\r\n\r\n      <el-form ref=\"myForm\" autocomplete=\"off\" :model=\"form\" :rules=\"rules\">\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"form.username\" placeholder=\"输入用户名\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input v-model=\"form.password\" type=\"password\" placeholder=\"输入用户密码\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item class=\"tc\">\r\n          <el-button type=\"primary\" @click=\"clickLogin\">登 录</el-button>\r\n          <el-button  @click=\"reset\">重 置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { login } from '@/api/user.js'\r\n\r\nexport default {\r\n  name: 'LoginIndex',\r\n  data () {\r\n    return {\r\n      form: {\r\n        username: '',\r\n        password: ''\r\n      },\r\n      rules: {\r\n      // 设定对应字段的校验规则\r\n      // required:true  必填\r\n      // message: xx  错误提示消息\r\n      // trigger: 'blur' / 'change' 设置触发校验的时机，可选项就两个值\r\n      //          (1) blur 失去焦点校验(常规)\r\n      //          (2) change 实时校验，类似于输入框input事件的效果\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: ['blur', 'change'] },\r\n          { min: 5, max: 11, message: '长度在 5 到 11 个字符', trigger: ['blur', 'change'] }\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: ['blur', 'change'] },\r\n          // { min: 5, max: 11, message: '长度在 6 到 11 个字符', trigger: ['blur', 'change'] }\r\n          { pattern: /^\\w{5,11}$/, message: '长度在 5 到 11 个字符', trigger: ['blur', 'change'] }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async clickLogin () {\r\n      // console.log(this.$refs.myForm)\r\n      try {\r\n        await this.$refs.myForm.validate()\r\n        // 调用api的login方法，发送请求\r\n        const res = await login(this.form)\r\n        // console.log(res)\r\n        // 公司里的实际规范，将token等个人信息，存入vuex,便于各个页面组件访问 => 存storage (持久化存储)\r\n        // vuex中的数据，类似于data 中的数据，一旦刷新页面，就会重新初始化(vuex刷新会丢失数据)\r\n        // 所有访问token，访问个人信息，一律找vuex。存本地就一个目的：保证刷新之后，vuex的数据还在\r\n        // console.log(res.data.token)\r\n        this.$store.commit('user/setUserToken', res.data.token)\r\n\r\n        // 注意：一定要等vuex token存好了，在跳首页\r\n        this.$router.push('/')\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    },\r\n    reset () {\r\n      // 重置表单，包含 表单内容 + 校验状态的重置 => 调用 form 方法\r\n      this.$refs.myForm.resetFields()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.login-page {\r\n  min-height: 100vh;\r\n  background: url(@/assets/login-bg.svg) no-repeat center / cover;\r\n  display: flex;\r\n  //垂直居中\r\n  align-items: center;\r\n  //间隙两边排布\r\n  justify-content: space-around;\r\n  .el-card {\r\n    width: 420px;\r\n    ::v-deep .el-card__header{\r\n      height: 80px;\r\n      background: black;\r\n      text-align: center;\r\n      line-height: 40px;\r\n      color: #fff;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n  .el-form {\r\n    padding: 0 20px;\r\n  }\r\n  .tc {\r\n    text-align: center;\r\n  }\r\n\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=089f3118&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=089f3118&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"089f3118\",\n  null\n  \n)\n\nexport default component.exports","import request from '@/utils/request'\r\n\r\n// 登录 api 的封装\r\n// 从传过来的对象中，解构出 username 和 password\r\nexport const login = ({ username, password }) => {\r\n  return request.post('/auth/login', {\r\n    username,\r\n    password\r\n  })\r\n}\r\n\r\n// 获取当前的用户信息\r\nexport const getUser = () => {\r\n  return request.get('/auth/currentUser')\r\n}\r\n"],"names":["render","_vm","this","_c","_self","staticClass","scopedSlots","_u","key","fn","_v","proxy","ref","attrs","form","rules","model","value","username","callback","$$v","$set","expression","password","on","clickLogin","reset","staticRenderFns","name","data","required","message","trigger","min","max","pattern","methods","$refs","myForm","validate","res","login","$store","commit","token","$router","push","e","console","log","resetFields","component","request","getUser"],"sourceRoot":""}